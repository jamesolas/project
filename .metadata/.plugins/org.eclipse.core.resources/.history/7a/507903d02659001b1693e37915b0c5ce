package com.app.dao.impl;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.stream.Stream;

import org.apache.log4j.Logger;

import com.app.dao.CustomerSearchDAO;
import com.app.dao.dbutil.PostresqlConnection;
import com.app.exception.BusinessException;
import com.app.model.Customer;
import com.app.model.CustomerAccount;
import com.app.model.CustomerRequests;
import com.app.model.Employee;
import com.app.model.TransactionRequests;
import com.app.model.Transactions;
import com.app.service.impl.CustomerSearchServiceImpl;

public class CustomerSearchDAOImpl implements CustomerSearchDAO {
	
	private static Logger log = Logger.getLogger(CustomerSearchServiceImpl.class);
	
	@Override
	public Customer customerLogin(String customerEmail, String customerPassword) throws BusinessException {
		Customer customer = null;

		try(Connection connection = PostresqlConnection.getConnection()){
			String sql = "select customeremail, customerpassword, customerid from project.customer "
					+ "where customeremail=? and customerpassword=?";
			PreparedStatement preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setString(1, customerEmail);
			preparedStatement.setString(2, customerPassword);
			ResultSet resultSet = preparedStatement.executeQuery();
			if(resultSet.next()) {
				customer = new Customer();
				customer.setCustomerEmail(customerEmail);
				customer.setCustomerPassword(customerPassword);	
				customer.setCustomerId(resultSet.getLong("customerid"));
		}else {
			//throw new BusinessException("Username and password do not match");
			log.info("Username and password do not match");
		}
		}catch(ClassNotFoundException | SQLException e){
			log.info(e);
			throw new BusinessException("Internal error occurred.");
		}
		return customer;
	}

	@Override
	public CustomerAccount viewBalance(long customerId) throws BusinessException {
		CustomerAccount customerAccount = null;
		try(Connection connection = PostresqlConnection.getConnection()){
			String sql = "select accountnumber, accountbalance from project.account where customerid = ?";
			PreparedStatement preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setLong(1, customerId);
			ResultSet resultSet = preparedStatement.executeQuery();
			if(resultSet.next()) {
				customerAccount = new CustomerAccount();
				customerAccount.setCustomerId(customerId);
				customerAccount.setAccountNumber(resultSet.getLong("accountNumber"));
				customerAccount.setAccountBalance(resultSet.getLong("accountbalance"));
			}else {
				throw new BusinessException("No account balance.");
			}	
		}catch(ClassNotFoundException | SQLException e) {
			log.info(e);
			throw new BusinessException("Internal error occurred.");
		}
		
		return customerAccount;
	}

	@Override
	public long findCustomerId(String customerEmail) throws BusinessException {
		long customerId;
		try(Connection connection = PostresqlConnection.getConnection()){
			String sql = "select customerid from project.customer where customeremail = ?";
			PreparedStatement preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setString(1, customerEmail);
			ResultSet resultSet = preparedStatement.executeQuery();
			if(resultSet.next()) {
				customerId = resultSet.getLong("customerid");
				
				
			}else {
				throw new BusinessException("No account balance.");
			}	
		}catch(ClassNotFoundException | SQLException e) {
			log.info(e);
			throw new BusinessException("Internal error occurred.");
		}
		
		return customerId;
	}

	@Override
	public long findAccountNumber(long customerId) throws BusinessException {
		long accountNumber;
		try(Connection connection = PostresqlConnection.getConnection()){
			String sql = "select accountnumber from project.account where customerid = ?";
			PreparedStatement preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setLong(1, customerId);
			ResultSet resultSet = preparedStatement.executeQuery();
			if(resultSet.next()) {
				accountNumber = resultSet.getLong("accountnumber");
				
				
			}else {
				throw new BusinessException("No account balance.");
			}	
		}catch(ClassNotFoundException | SQLException e) {
			log.info(e);
			throw new BusinessException("Internal error occurred.");
		}
		
		return accountNumber;
	}

	@Override
	public long findBalance(long customerId) throws BusinessException {
		long balance;
		try(Connection connection = PostresqlConnection.getConnection()){
			String sql = "select accountbalance from project.account where customerid = ?";
			PreparedStatement preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setLong(1, customerId);
			ResultSet resultSet = preparedStatement.executeQuery();
			if(resultSet.next()) {
				balance = resultSet.getLong("accountbalance");	
			}else {
				throw new BusinessException("No account balance.");
			}	
		}catch(ClassNotFoundException | SQLException e) {
			log.info(e);
			throw new BusinessException("Internal error occurred.");
		}
		
		return balance;
	}

	@Override
	public long getSendingAccount(long transactionId) throws BusinessException {
		long balance;
		try(Connection connection = PostresqlConnection.getConnection()){
			String sql = "select sendingaccountnumber from project.transactions where transactionid = ?";
			PreparedStatement preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setLong(1, transactionId);
			ResultSet resultSet = preparedStatement.executeQuery();
			if(resultSet.next()) {
				balance = resultSet.getLong("sendingaccountnumber");	
			}else {
				throw new BusinessException("No account balance.");
			}	
		}catch(ClassNotFoundException | SQLException e) {
			log.info(e);
			throw new BusinessException("Internal error occurred.");
		}
		
		return balance;
	}

	@Override
	public List<TransactionRequests> findReceiving(int accountNumber) throws BusinessException {
		List<TransactionRequests> transactionRequestsList = new ArrayList<>();
		try(Connection connection = PostresqlConnection.getConnection()){
			String sql="select amount, date, sendingaccountnumber, receivingaccountnumber, requestid from project.transactionrequests where receivingaccountnumber=?";
			PreparedStatement preparedStatement  = connection.prepareStatement(sql);
			preparedStatement.setInt(1, accountNumber);
			ResultSet resultSet = preparedStatement.executeQuery();
			while(resultSet.next()){
				TransactionRequests transactionRequests = new TransactionRequests();
				transactionRequests.setAmount(resultSet.getInt("amount"));
				transactionRequests.setDate(resultSet.getDate("date"));
				transactionRequests.setSendingAccount(resultSet.getLong("sendingaccountnumber"));
				transactionRequests.setReceivingAccount(resultSet.getLong("receivingaccountnumber"));
				transactionRequests.setRequestId(resultSet.getLong("requestid"));
				transactionRequestsList.add(transactionRequests);
			}
			if(transactionRequestsList.size() == 0){
				throw new BusinessException("No incoming money transfer found with account number " + accountNumber);
			}
		} catch (ClassNotFoundException | SQLException e) {
			System.out.println(e);
			throw new BusinessException("Internal error occured. Contact SYSADMIN.");
		}
		return transactionRequestsList;
	}

	@Override
	public Employee employeeLogin(String email, String password) throws BusinessException {
		Employee employee = null;

		try(Connection connection = PostresqlConnection.getConnection()){
			String sql = "select employeeid, firstname, lastname, email, password from project.employee "
					+ "where email=? and password=?";
			PreparedStatement preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setString(1, email);
			preparedStatement.setString(2, password);
			ResultSet resultSet = preparedStatement.executeQuery();
			if(resultSet.next()) {
				employee = new Employee();
				employee.setEmployeeId(resultSet.getInt("employeeid"));
				employee.setFirstName(resultSet.getString("firstname"));
				employee.setLastName(resultSet.getString("lastname"));
				employee.setEmail(resultSet.getString("email"));
				employee.setPassword(resultSet.getString("password"));	
				
		}else {
			log.info("Username and password do not match");
		}
		}catch(ClassNotFoundException | SQLException e){
			log.info(e);
			throw new BusinessException("Internal error occurred.");
		}
		return employee;
	}

	@Override
	public List<Customer> viewCustomerBalances() throws BusinessException {
		List<Customer> customerList = new ArrayList<>();
		List<CustomerAccount> customerAccountList = new ArrayList<>();
		try(Connection connection = PostresqlConnection.getConnection()){
			String sql = "select customerfirstname, customerlastname, customeremail, customer.customerid, accountbalance, accountnumber from project.customer "
					+ "join project.account on customer.customerid = account.customerid";
			PreparedStatement preparedStatement = connection.prepareStatement(sql);
			ResultSet resultSet = preparedStatement.executeQuery();
			while(resultSet.next()) {
				Customer customer = new Customer();			
				customer.setCustomerFirstName(resultSet.getString("customerfirstname"));
				customer.setCustomerLastName(resultSet.getString("customerlastname"));
				customer.setCustomerEmail(resultSet.getString("customeremail"));
				customer.setCustomerId(resultSet.getLong("customerid"));
				customer.setAccountBalance(resultSet.getLong("accountbalance"));	
				customer.setAccountNumber(resultSet.getLong("accountnumber"));	
				customerList.add(customer);
				//customerAccountList.add(customerAccount);
		}
			if(customerList.size() == 0 && customerAccountList.size() == 0) {
			throw new BusinessException("No results");
		}
		}catch(ClassNotFoundException | SQLException e){
			log.info(e);
			throw new BusinessException("Internal error occurred.");
		}

                 
		return customerList;
	}

	@Override
	public List<Transactions> viewAllTransactions() throws BusinessException {
		List<Transactions> transactionsList = new ArrayList<>();
		try(Connection connection = PostresqlConnection.getConnection()){
			String sql="select transactionid, date, amount, sendingaccountnumber, receivingaccountnumber, accountnumber from project.transactions";
			PreparedStatement preparedStatement  = connection.prepareStatement(sql);
			ResultSet resultSet = preparedStatement.executeQuery();
			while(resultSet.next()){
				Transactions transactions = new Transactions();
				transactions.setTransactionId(resultSet.getLong("transactionid"));
				transactions.setDate(resultSet.getDate("date"));
				transactions.setAmount(resultSet.getInt("amount"));
				transactions.setSendingAccountNumber(resultSet.getLong("sendingaccountnumber"));
				transactions.setReceivingAccountNumber(resultSet.getLong("receivingaccountnumber"));
				transactions.setAccountNumber(resultSet.getLong("accountnumber"));
				
				transactionsList.add(transactions);
			}
			if(transactionsList.size() == 0){
				throw new BusinessException("No transactions found.");
			}
		} catch (ClassNotFoundException | SQLException e) {
			System.out.println(e);
			throw new BusinessException("Internal error occured. Contact SYSADMIN.");
		}
		return transactionsList;
	}


	@Override
	public long getSenderId(long sendingAccountNumber) throws BusinessException {
		long customerId;
		try(Connection connection = PostresqlConnection.getConnection()){
			String sql = "select customerid from project.account where accountnumber = ?";
			PreparedStatement preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setLong(1, sendingAccountNumber);
			ResultSet resultSet = preparedStatement.executeQuery();
			if(resultSet.next()) {
				customerId = resultSet.getLong("customerid");
			
				log.info(sendingAccountNumber);	
				
			}else {
				throw new BusinessException("No transactions found for getSenderId.");
			}	
		}catch(ClassNotFoundException | SQLException e) {
			log.info(e);
			throw new BusinessException("Internal error occurred.");
		}
		
		return customerId;
	}

	@Override
	public long getAmount(long requestId) throws BusinessException {
		long amount;
		try(Connection connection = PostresqlConnection.getConnection()){
			String sql = "select amount from project.transactionrequests where requestid = ?";
			PreparedStatement preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setLong(1, requestId);
			ResultSet resultSet = preparedStatement.executeQuery();
			if(resultSet.next()) {
				amount = resultSet.getLong("amount");
				
			}else {
				throw new BusinessException("No transactions found for getAmount.");
			}	
		}catch(ClassNotFoundException | SQLException e) {
			log.info(e);
			throw new BusinessException("Internal error occurred.");
		}
		
		return amount;
	}

	@Override
	public Date getDate(long receivingAccountNumber) throws BusinessException {
		Date date;
		try(Connection connection = PostresqlConnection.getConnection()){
			String sql = "select date from project.transactionrequests where receivingaccountnumber = ?";
			PreparedStatement preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setLong(1, receivingAccountNumber);
			ResultSet resultSet = preparedStatement.executeQuery();
			if(resultSet.next()) {
					
				date = resultSet.getDate("date");
							
			}else {
				throw new BusinessException("No transactions found for getDate.");
			}	
		}catch(ClassNotFoundException | SQLException e) {
			log.info(e);
			throw new BusinessException("Internal error occurred.");
		}
		
		return date;
	}

	@Override
	public long getReceiverId(long receivingAccountNumber) throws BusinessException {
		long receiverId;
		try(Connection connection = PostresqlConnection.getConnection()){
			String sql = "select customerid from project.account where accountnumber = ?";
			PreparedStatement preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setLong(1, receivingAccountNumber);
			ResultSet resultSet = preparedStatement.executeQuery();
			if(resultSet.next()) {
				receiverId = resultSet.getLong("customerid");
				
				
			}else {
				throw new BusinessException("No transactions found for getReceiverId.");
			}	
		}catch(ClassNotFoundException | SQLException e) {
			log.info(e);
			throw new BusinessException("Internal error occurred.");
		}
		
		return receiverId;
	}

	@Override
	public long getSenderAccount(long requestId) throws BusinessException {
		long senderAccount;
		try(Connection connection = PostresqlConnection.getConnection()){
			String sql = "select sendingaccountnumber from project.transactionrequests where requestid = ?";
			PreparedStatement preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setLong(1, requestId);
			ResultSet resultSet = preparedStatement.executeQuery();
			if(resultSet.next()) {
				senderAccount = resultSet.getLong("sendingaccountnumber");
				
				
			}else {
				throw new BusinessException("No transactions found for getSenderAccount.");
			}	
		}catch(ClassNotFoundException | SQLException e) {
			log.info(e);
			throw new BusinessException("Internal error occurred.");
		}
		
		return senderAccount;
	}

	@Override
	public List<CustomerRequests> viewCustomerRequests() throws BusinessException {
		List<CustomerRequests> customerRequestsList = new ArrayList<>();
		try(Connection connection = PostresqlConnection.getConnection()){
			String sql = "select * from project.newcustomerrequests";
			PreparedStatement preparedStatement = connection.prepareStatement(sql);
			ResultSet resultSet = preparedStatement.executeQuery();
			while(resultSet.next()) {
				CustomerRequests customerRequests = new CustomerRequests();
				customerRequests.setCustomerFirstName(resultSet.getString("customerfirstname"));
				customerRequests.setCustomerLastName(resultSet.getString("customerlastname"));
				customerRequests.setCustomerEmail(resultSet.getString("customeremail"));
				customerRequests.setCustomerDob(resultSet.getDate("customerdob"));
				customerRequests.setAccountBalance(resultSet.getLong("customeraccountbalance"));
				customerRequests.setRequestId(resultSet.getLong("requestid"));
				customerRequestsList.add(customerRequests);
			}
			if(customerRequestsList.size() == 0) {
				log.info("No customer requests");
			}
			
		} catch (ClassNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
		
		return customerRequestsList;
	}
	
	
	

}
